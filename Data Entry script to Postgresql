import tkinter as tk
from tkinter import messagebox, Menu, ttk
from datetime import datetime, date
import psycopg2
import os
import configparser

# Read database configuration
config = configparser.ConfigParser()
config.read('config.ini')

# Database connection parameters (use environment variables for security)
db_params = {
    'dbname': config['database']['db_name'],
    'user': config['database']['user'],
    'password': config['database']['password'],
    'host': config['database']['host'],
    'port': config['database']['port']
}


class LedgerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Ledger Entry Form")
        self.create_menu()
        self.create_tabs()  # Create tabs for the application
        self.load_categories()  # Load categories when the app starts
        self.load_accounting_ids()  # Load accounting IDs with account type when the app starts

    def create_menu(self):
        """Create a menu bar with an option to exit the application."""
        menubar = Menu(self.root)
        file_menu = Menu(menubar, tearoff=0)
        file_menu.add_command(label="Exit", command=self.root.quit)
        menubar.add_cascade(label="File", menu=file_menu)
        self.root.config(menu=menubar)

    def create_tabs(self):
        """Create tabs for Ledger Entry and Reporting."""
        self.tab_control = ttk.Notebook(self.root)

        # Create Ledger Entry Tab
        self.ledger_tab = ttk.Frame(self.tab_control)
        self.tab_control.add(self.ledger_tab, text='Ledger Entry')

        # Create Reporting Tab
        self.reporting_tab = ttk.Frame(self.tab_control)
        self.tab_control.add(self.reporting_tab, text='Reporting')

        self.tab_control.pack(expand=1, fill='both')

        self.create_ledger_widgets()  # Create widgets for the ledger tab
        self.create_reporting_widgets()  # Create widgets for the reporting tab

    def create_ledger_widgets(self):
        # Category dropdown
        tk.Label(self.ledger_tab, text="Category:").grid(row=0, column=0, padx=10, pady=5, sticky="e")
        self.category_var = tk.StringVar(value="Select a Category")
        self.category_dropdown = tk.OptionMenu(self.ledger_tab, self.category_var, "Loading...")
        self.category_dropdown.grid(row=0, column=1, padx=10, pady=5)

        # Date input
        tk.Label(self.ledger_tab, text="Date (DDMM):").grid(row=1, column=0, padx=10, pady=5, sticky="e")
        self.date_var = tk.StringVar()
        self.date_entry = tk.Entry(self.ledger_tab, textvariable=self.date_var)
        self.date_entry.grid(row=1, column=1, padx=10, pady=5)

        # Amount input
        tk.Label(self.ledger_tab, text="Amount:").grid(row=2, column=0, padx=10, pady=5, sticky="e")
        self.amount_var = tk.StringVar()
        self.amount_entry = tk.Entry(self.ledger_tab, textvariable=self.amount_var)
        self.amount_entry.grid(row=2, column=1, padx=10, pady=5)

        # Description input
        tk.Label(self.ledger_tab, text="Description:").grid(row=3, column=0, padx=10, pady=5, sticky="e")
        self.description_var = tk.StringVar()
        self.description_entry = tk.Entry(self.ledger_tab, textvariable=self.description_var)
        self.description_entry.grid(row=3, column=1, padx=10, pady=5)

        # Accounting ID dropdown with Account Type
        tk.Label(self.ledger_tab, text="Accounting ID:").grid(row=4, column=0, padx=10, pady=5, sticky="e")
        self.accounting_id_var = tk.StringVar(value="Select an Accounting ID")
        self.accounting_id_dropdown = tk.OptionMenu(self.ledger_tab, self.accounting_id_var, "Loading...")
        self.accounting_id_dropdown.grid(row=4, column=1, padx=10, pady=5)

        # Submit button for Ledger Entry
        self.submit_ledger_button = tk.Button(self.ledger_tab, text="Submit Ledger Entry", command=self.submit_ledger)
        self.submit_ledger_button.grid(row=5, column=0, columnspan=2, pady=10)

        # Separator
        tk.Label(self.ledger_tab, text="Bank Balances Entry", font=("Arial", 12, "bold")).grid(row=6, column=0, columnspan=2, pady=(20, 5))

        # Balance Date (Closest Monday)
        tk.Label(self.ledger_tab, text="Balance Date:").grid(row=7, column=0, padx=10, pady=5, sticky="e")
        self.balance_date_var = tk.StringVar(value=self.get_closest_monday())
        self.balance_date_label = tk.Label(self.ledger_tab, textvariable=self.balance_date_var)
        self.balance_date_label.grid(row=7, column=1, padx=10, pady=5)

        # Account Balance fields
        self.accounts = ["Account A", "Account B", "Account C", "Account D"]
        self.account_vars = {}
        for idx, account in enumerate(self.accounts, start=8):
            import tkinter as tk
from tkinter import messagebox, Menu, ttk
from datetime import datetime, date
import psycopg2
import os
import configparser

#to do kane update to Report display

# Read database configuration
config = configparser.ConfigParser()
config.read('config.ini')

# Database connection parameters (use environment variables for security)
db_params = {
    'dbname': config['database']['db_name'],
    'user': config['database']['user'],
    'password': config['database']['password'],
    'host': config['database']['host'],
    'port': config['database']['port']
}


class LedgerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Ledger Entry Form")
        self.create_menu()
        self.create_tabs()  # Create tabs for the application
        self.load_categories()  # Load categories when the app starts
        self.load_accounting_ids()  # Load accounting IDs with account type when the app starts

    def create_menu(self):
        """Create a menu bar with an option to exit the application."""
        menubar = Menu(self.root)
        file_menu = Menu(menubar, tearoff=0)
        file_menu.add_command(label="Exit", command=self.root.quit)
        menubar.add_cascade(label="File", menu=file_menu)
        self.root.config(menu=menubar)

    def create_tabs(self):
        """Create tabs for Ledger Entry and Reporting."""
        self.tab_control = ttk.Notebook(self.root)

        # Create Ledger Entry Tab
        self.ledger_tab = ttk.Frame(self.tab_control)
        self.tab_control.add(self.ledger_tab, text='Ledger Entry')

        # Create Reporting Tab
        self.reporting_tab = ttk.Frame(self.tab_control)
        self.tab_control.add(self.reporting_tab, text='Reporting')

        self.tab_control.pack(expand=1, fill='both')

        self.create_ledger_widgets()  # Create widgets for the ledger tab
        self.create_reporting_widgets()  # Create widgets for the reporting tab

    def create_ledger_widgets(self):
        # Category dropdown
        tk.Label(self.ledger_tab, text="Category:").grid(row=0, column=0, padx=10, pady=5, sticky="e")
        self.category_var = tk.StringVar(value="Select a Category")
        self.category_dropdown = tk.OptionMenu(self.ledger_tab, self.category_var, "Loading...")
        self.category_dropdown.grid(row=0, column=1, padx=10, pady=5)

        # Date input
        tk.Label(self.ledger_tab, text="Date (DDMM):").grid(row=1, column=0, padx=10, pady=5, sticky="e")
        self.date_var = tk.StringVar()
        self.date_entry = tk.Entry(self.ledger_tab, textvariable=self.date_var)
        self.date_entry.grid(row=1, column=1, padx=10, pady=5)

        # Amount input
        tk.Label(self.ledger_tab, text="Amount:").grid(row=2, column=0, padx=10, pady=5, sticky="e")
        self.amount_var = tk.StringVar()
        self.amount_entry = tk.Entry(self.ledger_tab, textvariable=self.amount_var)
        self.amount_entry.grid(row=2, column=1, padx=10, pady=5)

        # Description input
        tk.Label(self.ledger_tab, text="Description:").grid(row=3, column=0, padx=10, pady=5, sticky="e")
        self.description_var = tk.StringVar()
        self.description_entry = tk.Entry(self.ledger_tab, textvariable=self.description_var)
        self.description_entry.grid(row=3, column=1, padx=10, pady=5)

        # Accounting ID dropdown with Account Type
        tk.Label(self.ledger_tab, text="Accounting ID:").grid(row=4, column=0, padx=10, pady=5, sticky="e")
        self.accounting_id_var = tk.StringVar(value="Select an Accounting ID")
        self.accounting_id_dropdown = tk.OptionMenu(self.ledger_tab, self.accounting_id_var, "Loading...")
        self.accounting_id_dropdown.grid(row=4, column=1, padx=10, pady=5)

        # Submit button for Ledger Entry
        self.submit_ledger_button = tk.Button(self.ledger_tab, text="Submit Ledger Entry", command=self.submit_ledger)
        self.submit_ledger_button.grid(row=5, column=0, columnspan=2, pady=10)

        # Separator
        tk.Label(self.ledger_tab, text="Bank Balances Entry", font=("Arial", 12, "bold")).grid(row=6, column=0, columnspan=2, pady=(20, 5))

        # Balance Date (Closest Monday)
        tk.Label(self.ledger_tab, text="Balance Date:").grid(row=7, column=0, padx=10, pady=5, sticky="e")
        self.balance_date_var = tk.StringVar(value=self.get_closest_monday())
        self.balance_date_label = tk.Label(self.ledger_tab, textvariable=self.balance_date_var)
        self.balance_date_label.grid(row=7, column=1, padx=10, pady=5)

        # Account Balance fields
        self.accounts = ["Account A", "Account B", "Account C", "Account D"]
        self.account_vars = {}
        for idx, account in enumerate(self.accounts, start=8):
            tk.Label(self.ledger_tab, text=f"{account} Balance:").grid(row=idx, column=0, padx=10, pady=5, sticky="e")
            self.account_vars[account] = tk.StringVar()
            tk.Entry(self.ledger_tab, textvariable=self.account_vars[account]).grid(row=idx, column=1, padx=10, pady=5)

        # Submit button for Bank Balances Entry
        self.submit_balances_button = tk.Button(self.ledger_tab, text="Submit Bank Balances", command=self.submit_bank_balances)
        self.submit_balances_button.grid(row=12, column=0, columnspan=2, pady=10)

        # Close button
        self.close_button = tk.Button(self.ledger_tab, text="Close", command=self.root.quit)
        self.close_button.grid(row=13, column=0, columnspan=2, pady=10)

    def create_reporting_widgets(self):
        """Create widgets for the Reporting tab."""
        tk.Label(self.reporting_tab, text="Reporting Section", font=("Arial", 16)).pack(pady=20)

        # Button for Balances Report
        self.balances_button = tk.Button(self.reporting_tab, text="Balances", command=self.generate_balances_report)
        self.balances_button.pack(pady=5)

        # Button for Profit and Loss Report
        self.profit_loss_button = tk.Button(self.reporting_tab, text="Profit and Loss", command=self.generate_profit_loss_report)
        self.profit_loss_button.pack(pady=5)

        self.report_text = tk.Text(self.reporting_tab, height=10, width=50)
        self.report_text.pack(pady=10)

    def load_categories(self):
        """Load categories from the database and update the dropdown menu."""
        try:
            with psycopg2.connect(**db_params) as conn:
                with conn.cursor() as cursor:
                    cursor.execute("SELECT DISTINCT account_category FROM accounts_uat")
                    categories = cursor.fetchall()
                    self.category_dropdown['menu'].delete(0, 'end')
                    for category in categories:
                        self.category_dropdown['menu'].add_command(label=category[0],
                                                                   command=tk._setit(self.category_var, category[0]))
                    if categories:
                        self.category_var.set(categories[0][0])
                    else:
                        self.category_var.set("No categories available")
        except psycopg2.Error as e:
            messagebox.showerror("Database Error", f"Error loading categories: {e.pgcode} - {e.pgerror}")
            self.category_var.set("Error loading categories")

    def load_accounting_ids(self):
        """Load accounting IDs with account types from the database and update the dropdown menu."""
        try:
            with psycopg2.connect(**db_params) as conn:
                with conn.cursor() as cursor:
                    cursor.execute("SELECT accounting_id, account_type FROM accounts_uat")
                    accounting_ids = cursor.fetchall()
                    self.accounting_id_dropdown['menu'].delete(0, 'end')
                    for acc_id, acc_type in accounting_ids:
                        display_text = f"ID: {acc_id} - Type: {acc_type}"
                        self.accounting_id_dropdown['menu'].add_command(
                            label=display_text,
                            command=tk._setit(self.accounting_id_var, display_text)
                        )
                    if accounting_ids:
                        self.accounting_id_var.set(f"ID: {accounting_ids[0][0]} - Type: {accounting_ids[0][1]}")
                    else:
                        self.accounting_id_var.set("No accounting IDs available")
        except psycopg2.Error as e:
            messagebox.showerror("Database Error", f"Error loading accounting IDs: {e.pgcode} - {e.pgerror}")
            self.accounting_id_var.set("Error loading accounting IDs")

    def get_closest_monday(self):
        today = date.today()
        try:
            with psycopg2.connect(**db_params) as conn:
                with conn.cursor() as cursor:
                    cursor.execute("""
                        SELECT monday_date FROM mondays_2024_uat
                        WHERE monday_date >= %s
                        ORDER BY monday_date ASC LIMIT 1
                    """, (today,))
                    result = cursor.fetchone()
                    return result[0] if result else "No upcoming Mondays"
        except psycopg2.Error as e:
            messagebox.showerror("Database Error", f"Error fetching closest Monday: {e.pgcode} - {e.pgerror}")
            return "Error fetching Monday"

    def submit_ledger(self):
        """Submit ledger entry to the database."""
        try:
            category = self.category_var.get()
            date_input = self.date_var.get()
            amount = float(self.amount_var.get())
            description = self.description_var.get()
            accounting_id = self.accounting_id_var.get().split()[1]  # Extract ID from dropdown text

            # Ensure date is in correct format
            if len(date_input) != 4 or not date_input.isdigit():
                raise ValueError("Date must be in DDMM format")

            day = date_input[:2]
            month = date_input[2:]
            current_year = datetime.now().year
            date_entry = datetime.strptime(f"{day}{month}{current_year}", "%d%m%Y").date()

            with psycopg2.connect(**db_params) as conn:
                with conn.cursor() as cursor:
                    insert_query = """
                        INSERT INTO ledger_uat (category, date, amount, description, accounting_id, timestamp)
                        VALUES (%s, %s, %s, %s, %s, %s)
                    """
                    cursor.execute(insert_query, (category, date_entry, amount, description, accounting_id, datetime.now()))
                    conn.commit()
            messagebox.showinfo("Success", "Ledger entry submitted successfully.")
            self.clear_ledger_fields()
        except ValueError as ve:
            messagebox.showerror("Input Error", str(ve))
        except psycopg2.Error as e:
            messagebox.showerror("Database Error", f"Database error: {e.pgcode} - {e.pgerror}")
        except Exception as e:
            messagebox.showerror("Error", f"An unexpected error occurred: {e}")

    def submit_bank_balances(self):
        """Submit bank balances to the database."""
        try:
            balance_date = self.balance_date_var.get()
            balances = {account: float(self.account_vars[account].get()) for account in self.accounts}

            with psycopg2.connect(**db_params) as conn:
                with conn.cursor() as cursor:
                    insert_query = """
                        INSERT INTO bank_balances_uat (balance_date, account_a, account_b, account_c, account_d, timestamp)
                        VALUES (%s, %s, %s, %s, %s, %s)
                    """
                    cursor.execute(insert_query, (balance_date, balances['Account A'], balances['Account B'],
                                                  balances['Account C'], balances['Account D'], datetime.now()))
                    conn.commit()
            messagebox.showinfo("Success", "Bank balances inserted successfully.")
            self.clear_bank_balance_fields()
        except ValueError:
            messagebox.showerror("Input Error", "Invalid balance format.")
        except psycopg2.Error as e:
            messagebox.showerror("Database Error", f"Database error: {e.pgcode} - {e.pgerror}")

    def clear_ledger_fields(self):
        """Clears the ledger entry fields after submission."""
        self.category_var.set("Select a Category")
        self.date_var.set("")
        self.amount_var.set("")
        self.description_var.set("")
        self.accounting_id_var.set("Select an Accounting ID")

    def clear_bank_balance_fields(self):
        """Clears the bank balance entry fields after submission."""
        for account in self.accounts:
            self.account_vars[account].set("")

    def generate_balances_report(self):
        """Fetch the latest data from the bank_balances_uat table and display it in the reporting text widget."""
        try:
            with psycopg2.connect(**db_params) as conn:
                with conn.cursor() as cursor:
                    # Query to fetch the latest bank balance entry
                    cursor.execute("""
                        SELECT balance_date, account_a, account_b, account_c, account_d, total_balance, timestamp
                        FROM bank_balances_uat
                        ORDER BY balance_date DESC, timestamp DESC
                        LIMIT 1
                    """)
                    result = cursor.fetchone()

                    # Clear previous report text
                    self.report_text.delete(1.0, tk.END)

                    # Display fetched data in the text widget
                    if result:
                        balance_date, account_a, account_b, account_c, account_d, total_balance, timestamp = result
                        report_text = (f"Latest Bank Balance Entry:\n"
                                       f"{'-' * 50}\n"
                                       f"Date: {balance_date}\n"
                                       f"Account A: {account_a}\n"
                                       f"Account B: {account_b}\n"
                                       f"Account C: {account_c}\n"
                                       f"Account D: {account_d}\n"
                                       f"Total_Balance:{total_balance}\n"
                                       f"Timestamp: {timestamp}\n"
                                       f"{'-' * 50}\n")
                        self.report_text.insert(tk.END, report_text)
                    else:
                        self.report_text.insert(tk.END, "No bank balance data available.")
        except psycopg2.Error as e:
            messagebox.showerror("Database Error", f"Error fetching report data: {e.pgcode} - {e.pgerror}")
        except Exception as e:
            messagebox.showerror("Error", f"An unexpected error occurred: {e}")

    def generate_profit_loss_report(self):
        """Fetch and display the Profit and Loss report from the Monthly_PnL view."""
        try:
            # Establish a connection to the database
            with psycopg2.connect(**db_params) as conn:
                with conn.cursor() as cursor:
                    # Query to fetch data from the Monthly_PnL view
                    cursor.execute("""
                        SELECT * FROM public."Monthly PnL"
                    """)
                    results = cursor.fetchall()
                    column_names = [desc[0] for desc in cursor.description]  # Extract column names for display

                    # Clear previous content in the report text box
                    self.report_text.delete(1.0, tk.END)

                    # Check if results are available
                    if results:
                        report_text = "Profit & Loss Report:\n" + "-" * 50 + "\n"
                        report_text += f"{'Month':<15}{'Income':<15}{'Costs':<10}{'Op Income':<10}\n"
                        report_text += "-" * 10 + "\n"  # To separate headers from data

                        # Loop through results and format them into a string
                        for row in results:
                            # Unpack the row into respective variables
                            month, income, costs, op_income = row

                            # Format each row as a string, aligned properly
                            report_text += f"{month:<5}{income:<10}{costs:<10}{op_income:<10}\n"

                        self.report_text.insert(tk.END, report_text)
                    else:
                        self.report_text.insert(tk.END, "No data available in the Monthly_PnL view.")


        except psycopg2.Error as e:
            # Handle specific database error
            messagebox.showerror("Database Error", f"Error fetching P&L report data: {e.pgcode} - {e.pgerror}")
        except Exception as e:
            # Catch any other unexpected exceptions
            messagebox.showerror("Error", f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    root = tk.Tk()
    app = LedgerApp(root)
    root.mainloop()




tk.Label(self.ledger_tab, text=f"{account} Balance:").grid(row=idx, column=0, padx=10, pady=5, sticky="e")
            self.account_vars[account] = tk.StringVar()
            tk.Entry(self.ledger_tab, textvariable=self.account_vars[account]).grid(row=idx, column=1, padx=10, pady=5)

        # Submit button for Bank Balances Entry
        self.submit_balances_button = tk.Button(self.ledger_tab, text="Submit Bank Balances", command=self.submit_bank_balances)
        self.submit_balances_button.grid(row=12, column=0, columnspan=2, pady=10)

        # Close button
        self.close_button = tk.Button(self.ledger_tab, text="Close", command=self.root.quit)
        self.close_button.grid(row=13, column=0, columnspan=2, pady=10)

    def create_reporting_widgets(self):
        """Create widgets for the Reporting tab."""
        tk.Label(self.reporting_tab, text="Reporting Section", font=("Arial", 16)).pack(pady=20)

        # Button for Balances Report
        self.balances_button = tk.Button(self.reporting_tab, text="Balances", command=self.generate_balances_report)
        self.balances_button.pack(pady=5)

        # Button for Profit and Loss Report
        self.profit_loss_button = tk.Button(self.reporting_tab, text="Profit and Loss", command=self.generate_profit_loss_report)
        self.profit_loss_button.pack(pady=5)

        self.report_text = tk.Text(self.reporting_tab, height=10, width=50)
        self.report_text.pack(pady=10)

    def load_categories(self):
        """Load categories from the database and update the dropdown menu."""
        try:
            with psycopg2.connect(**db_params) as conn:
                with conn.cursor() as cursor:
                    cursor.execute("SELECT DISTINCT account_category FROM accounts_uat")
                    categories = cursor.fetchall()
                    self.category_dropdown['menu'].delete(0, 'end')
                    for category in categories:
                        self.category_dropdown['menu'].add_command(label=category[0],
                                                                   command=tk._setit(self.category_var, category[0]))
                    if categories:
                        self.category_var.set(categories[0][0])
                    else:
                        self.category_var.set("No categories available")
        except psycopg2.Error as e:
            messagebox.showerror("Database Error", f"Error loading categories: {e.pgcode} - {e.pgerror}")
            self.category_var.set("Error loading categories")

    def load_accounting_ids(self):
        """Load accounting IDs with account types from the database and update the dropdown menu."""
        try:
            with psycopg2.connect(**db_params) as conn:
                with conn.cursor() as cursor:
                    cursor.execute("SELECT accounting_id, account_type FROM accounts_uat")
                    accounting_ids = cursor.fetchall()
                    self.accounting_id_dropdown['menu'].delete(0, 'end')
                    for acc_id, acc_type in accounting_ids:
                        display_text = f"ID: {acc_id} - Type: {acc_type}"
                        self.accounting_id_dropdown['menu'].add_command(
                            label=display_text,
                            command=tk._setit(self.accounting_id_var, display_text)
                        )
                    if accounting_ids:
                        self.accounting_id_var.set(f"ID: {accounting_ids[0][0]} - Type: {accounting_ids[0][1]}")
                    else:
                        self.accounting_id_var.set("No accounting IDs available")
        except psycopg2.Error as e:
            messagebox.showerror("Database Error", f"Error loading accounting IDs: {e.pgcode} - {e.pgerror}")
            self.accounting_id_var.set("Error loading accounting IDs")

    def get_closest_monday(self):
        today = date.today()
        try:
            with psycopg2.connect(**db_params) as conn:
                with conn.cursor() as cursor:
                    cursor.execute("""
                        SELECT monday_date FROM mondays_2024_uat
                        WHERE monday_date >= %s
                        ORDER BY monday_date ASC LIMIT 1
                    """, (today,))
                    result = cursor.fetchone()
                    return result[0] if result else "No upcoming Mondays"
        except psycopg2.Error as e:
            messagebox.showerror("Database Error", f"Error fetching closest Monday: {e.pgcode} - {e.pgerror}")
            return "Error fetching Monday"

    def submit_ledger(self):
        """Submit ledger entry to the database."""
        try:
            category = self.category_var.get()
            date_input = self.date_var.get()
            amount = float(self.amount_var.get())
            description = self.description_var.get()
            accounting_id = self.accounting_id_var.get().split()[1]  # Extract ID from dropdown text

            # Ensure date is in correct format
            if len(date_input) != 4 or not date_input.isdigit():
                raise ValueError("Date must be in DDMM format")

            day = date_input[:2]
            month = date_input[2:]
            current_year = datetime.now().year
            date_entry = datetime.strptime(f"{day}{month}{current_year}", "%d%m%Y").date()

            with psycopg2.connect(**db_params) as conn:
                with conn.cursor() as cursor:
                    insert_query = """
                        INSERT INTO ledger_uat (category, date, amount, description, accounting_id, timestamp)
                        VALUES (%s, %s, %s, %s, %s, %s)
                    """
                    cursor.execute(insert_query, (category, date_entry, amount, description, accounting_id, datetime.now()))
                    conn.commit()
            messagebox.showinfo("Success", "Ledger entry submitted successfully.")
            self.clear_ledger_fields()
        except ValueError as ve:
            messagebox.showerror("Input Error", str(ve))
        except psycopg2.Error as e:
            messagebox.showerror("Database Error", f"Database error: {e.pgcode} - {e.pgerror}")
        except Exception as e:
            messagebox.showerror("Error", f"An unexpected error occurred: {e}")

    def submit_bank_balances(self):
        """Submit bank balances to the database."""
        try:
            balance_date = self.balance_date_var.get()
            balances = {account: float(self.account_vars[account].get()) for account in self.accounts}

            with psycopg2.connect(**db_params) as conn:
                with conn.cursor() as cursor:
                    insert_query = """
                        INSERT INTO bank_balances_uat (balance_date, account_a, account_b, account_c, account_d, timestamp)
                        VALUES (%s, %s, %s, %s, %s, %s)
                    """
                    cursor.execute(insert_query, (balance_date, balances['Account A'], balances['Account B'],
                                                  balances['Account C'], balances['Account D'], datetime.now()))
                    conn.commit()
            messagebox.showinfo("Success", "Bank balances inserted successfully.")
            self.clear_bank_balance_fields()
        except ValueError:
            messagebox.showerror("Input Error", "Invalid balance format.")
        except psycopg2.Error as e:
            messagebox.showerror("Database Error", f"Database error: {e.pgcode} - {e.pgerror}")

    def clear_ledger_fields(self):
        """Clears the ledger entry fields after submission."""
        self.category_var.set("Select a Category")
        self.date_var.set("")
        self.amount_var.set("")
        self.description_var.set("")
        self.accounting_id_var.set("Select an Accounting ID")

    def clear_bank_balance_fields(self):
        """Clears the bank balance entry fields after submission."""
        for account in self.accounts:
            self.account_vars[account].set("")

    def generate_balances_report(self):
        """Fetch the latest data from the bank_balances_uat table and display it in the reporting text widget."""
        try:
            with psycopg2.connect(**db_params) as conn:
                with conn.cursor() as cursor:
                    # Query to fetch the latest bank balance entry
                    cursor.execute("""
                        SELECT balance_date, account_a, account_b, account_c, account_d, total_balance, timestamp
                        FROM bank_balances_uat
                        ORDER BY balance_date DESC, timestamp DESC
                        LIMIT 1
                    """)
                    result = cursor.fetchone()

                    # Clear previous report text
                    self.report_text.delete(1.0, tk.END)

                    # Display fetched data in the text widget
                    if result:
                        balance_date, account_a, account_b, account_c, account_d, total_balance, timestamp = result
                        report_text = (f"Latest Bank Balance Entry:\n"
                                       f"{'-' * 50}\n"
                                       f"Date: {balance_date}\n"
                                       f"Account A: {account_a}\n"
                                       f"Account B: {account_b}\n"
                                       f"Account C: {account_c}\n"
                                       f"Account D: {account_d}\n"
                                       f"Total_Balance:{total_balance}\n"
                                       f"Timestamp: {timestamp}\n"
                                       f"{'-' * 50}\n")
                        self.report_text.insert(tk.END, report_text)
                    else:
                        self.report_text.insert(tk.END, "No bank balance data available.")
        except psycopg2.Error as e:
            messagebox.showerror("Database Error", f"Error fetching report data: {e.pgcode} - {e.pgerror}")
        except Exception as e:
            messagebox.showerror("Error", f"An unexpected error occurred: {e}")

    def generate_profit_loss_report(self):
        """Fetch and display the Profit and Loss report from the Monthly_PnL view."""
        try:
            # Establish a connection to the database
            with psycopg2.connect(**db_params) as conn:
                with conn.cursor() as cursor:
                    # Query to fetch data from the Monthly_PnL view
                    cursor.execute("""
                        SELECT * FROM public."Monthly PnL"
                    """)
                    results = cursor.fetchall()
                    column_names = [desc[0] for desc in cursor.description]  # Extract column names for display

                    # Clear previous content in the report text box
                    self.report_text.delete(1.0, tk.END)

                    # Check if results are available
                    if results:
                        report_text = "Profit & Loss Report:\n" + "-" * 50 + "\n"
                        report_text += f"{'Month':<15}{'Income':<15}{'Costs':<10}{'Op Income':<10}\n"
                        report_text += "-" * 10 + "\n"  # To separate headers from data

                        # Loop through results and format them into a string
                        for row in results:
                            # Unpack the row into respective variables
                            month, income, costs, op_income = row

                            # Format each row as a string, aligned properly
                            report_text += f"{month:<5}{income:<10}{costs:<10}{op_income:<10}\n"

                        self.report_text.insert(tk.END, report_text)
                    else:
                        self.report_text.insert(tk.END, "No data available in the Monthly_PnL view.")


        except psycopg2.Error as e:
            # Handle specific database error
            messagebox.showerror("Database Error", f"Error fetching P&L report data: {e.pgcode} - {e.pgerror}")
        except Exception as e:
            # Catch any other unexpected exceptions
            messagebox.showerror("Error", f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    root = tk.Tk()
    app = LedgerApp(root)
    root.mainloop()




